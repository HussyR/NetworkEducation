URLSession используется для передачи данных(GET, POST...)
URLSessionConfiguration:
- default uses the disk-persisted global cache, credential and cookie storage objects
- ephemeral private session
- background Lets the session perform upload or download tasks in the background. Transfers continue even when the app itself is suspended or terminated by the system

URLSession Task Types:
- dataTask Use this task for GET requests to retrieve data from servers to memory
- uploadTask Use this task to upload a file from disk to a web service via a POST or PUT method
- downloadTask Use this task to download a file from a remote service to a temporary file location
Также при отмене download task можно получить уже загруженные данные через task.cancel(by...)
При повторном скачивании можно скачать с этими данными downloadTask(withResumeData: resumeData)


Также можно cancel/resume/suspend задачи.
URLSession returns data in two ways:
- completion handler
- By calling methods on a delegate that you set when you create the session

URLSessionDownloadDelegate 
Реализует методы для отслеживания загрузки
- location загрузки
- прогресса
...


BACKGROUND TASKS
Background работает в свернутом режиме, если приложение высвободили из памяти работать не будет

You must not create more than one session for a background configuration, because the system uses the configuration’s identifier to associate tasks with the session.

If a background task completes when the app isn’t running, the app will relaunch in the background. You’ll need to handle this event from your app delegate.

Это происходит в AppDelegate

application(_:handleEventsForBackgroundURLSession:) wakes up the app to deal with the completed background task. You’ll need to handle two items in this method:

- First, the app needs to recreate the appropriate background configuration and session using the identifier provided by this delegate method. But since this app creates the background session when it instantiates SearchViewController, you’re already reconnected at this point!

- Second, you’ll need to capture the completion handler provided by this delegate method. Invoking the completion handler tells the OS that your app’s done working with all background activities for the current session. It also causes the OS to snapshot your updated UI for display in the app switcher.
